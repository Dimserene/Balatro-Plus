[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Trigger Joker hand dollars effect at the end of round
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects[ii].h_dollars then"
position = "before"
match_indent = true
payload = """
if effects[ii].dollars then
  if effects[ii].card then juice_card(effects[ii].card) end
  ease_dollars(effects[ii].dollars)
  card_eval_status_text(G.hand.cards[i], 'dollars', effects[ii].dollars, percent)
end

"""

# Modify joker level_up effect
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "level_up_hand(G.jokers.cards[i], text)"
position = "before"
match_indent = true
payload = """
  local level = effects.jokers.level_up
  if type(level) ~= "number" then
    level = 1
  end
  level_up_hand(G.jokers.cards[i], text, nil, level)
end
if false then
"""

# Space Invader Joker ability
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then"
position = "at"
match_indent = true
payload = """
if self.seal == 'Blue' and (
  (#G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit)
  or next(find_joker("j_bplus_space_invader"))
) then
"""

# Anonymous Mask Joker ability
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_debuff(should_debuff)"
position = "after"
match_indent = true
payload = """
if next(find_joker("j_bplus_anonymous_mask")) and self:is_face() then
  should_debuff = false
end
"""

# Stone Carving Joker ability
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:is_suit(suit, bypass_debuff, flush_calc)"
position = "after"
match_indent = true
payload = """
if flush_calc then
  if self.ability.name == G.P_CENTERS.m_stone.name and not self.debuff and next(find_joker("j_bplus_stone_carving")) then
    return G.GAME.current_round.bplus_stone_carving_card.suit == suit
  end
else
  if self.debuff and not bypass_debuff then return end
  if self.ability.name == G.P_CENTERS.m_stone.name and next(find_joker("j_bplus_stone_carving")) then
    return G.GAME.current_round.bplus_stone_carving_card.suit == suit
  end
end
"""

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.effect == 'Stone Card' and not self.vampired then"
position = "after"
match_indent = true
payload = """
if self.ability.name == G.P_CENTERS.m_stone.name and not self.debuff and next(find_joker("j_bplus_stone_carving")) then
  return G.GAME.current_round.bplus_stone_carving_card.id
end
"""

# Add Joker trigger context
[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''(?<indent>[ \t])*for i = 1, #G\.jokers\.cards do
[ \t]*G\.jokers\.cards\[i\]:calculate_joker\(\{setting_blind = true, blind = G\.GAME\.round_resets\.blind\}\)
[ \t]*end
'''
line_prepend = "$indent"
position = "after"
payload = """
for _, card in ipairs(G.jokers.cards) do
  card:calculate_joker { post_setting_blind = true, blind = G.GAME.round_resets.blind }
end
"""
